# -*- coding: utf-8 -*-
"""Project Notebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WK_k50iUfoeSKoUdL8wpMjaKnUuic8oQ

#Load Data
"""

from google.colab import drive
drive.mount('/content/drive')

from PIL import Image
import numpy as np
import random

"""## Import Tensorflow"""

pip install git+https://github.com/tensorflow/examples.git

pip install tensorflow_addons

import tensorflow as tf
import tensorflow_datasets as tfds
import tensorflow_addons as tfa

from tensorflow_examples.models.pix2pix import pix2pix

from IPython.display import clear_output
import matplotlib.pyplot as plt

"""## Functions"""

def normalize(input_image):
  return tf.cast(input_image, tf.float32) / 255.0

def load_image(image):
  input_image = tf.image.resize(image, (128, 128))
  input_image = normalize(input_image)

  return input_image


def load_mask(segmentation):
  input_mask = tf.image.resize(segmentation,(128, 128),
    method = tf.image.ResizeMethod.NEAREST_NEIGHBOR)

  return input_mask

# function for plotting images
def display(display_list, title_list):
  plt.figure(figsize=(15, 15))

  for i in range(len(display_list)):
    plt.subplot(1, len(display_list), i+1)
    plt.title(title_list[i])
    plt.imshow(tf.keras.utils.array_to_img(display_list[i]), cmap='gray')
    plt.axis('off')
  plt.show()

# Augment image dataset
class Augment(tf.keras.layers.Layer):
  def __init__(self, seed=42):
    super().__init__()
    # both use the same seed, so they'll make the same random changes.
    self.augment_inputs = tf.keras.layers.RandomFlip(mode="horizontal", seed=seed)
    self.augment_labels = tf.keras.layers.RandomFlip(mode="horizontal", seed=seed)

  def call(self, inputs, labels):
    inputs = self.augment_inputs(inputs)
    labels = self.augment_labels(labels)
    return inputs, labels

"""##Load Images"""

# Upload All Images
images = []
segmentations = []
num_images = 116
for i in range(1, num_images+1):
  print(i)
  # original image
  filename = '/content/drive/MyDrive/Data/Images/' + str(i) + '.png'
  images.append(tf.convert_to_tensor(tf.keras.utils.img_to_array(Image.open(filename), dtype='uint8')))

  # segmentation 1
  filename = '/content/drive/MyDrive/Data/segmentation1/' + str(i) + '.png'
  segmentations.append(tf.convert_to_tensor(tf.keras.utils.img_to_array(Image.open(filename), dtype='uint8')))

"""## Process Images and Labels"""

# get masks from segmentations
# define background gray value as minimum pixel value
masks = [tf.where(segmentation > tf.math.reduce_min(segmentation), 1, 0) for segmentation in segmentations]

# Plot subset of data to verify input & label mask looks correct
for i in random.sample(range(num_images), 5):
  print("Image: ", i)
  display([images[i], segmentations[i], masks[i]], ['Input Image', 'True Segmentation', 'True Mask'])

# convert images from grayscale to rgb (MobileNet requires RGB)
images = [tf.image.grayscale_to_rgb(image) for image in images]
segmentations = [tf.image.grayscale_to_rgb(segmentation) for segmentation in segmentations]

# resize and normalize images & masks
processed_images = [load_image(image) for image in images]
processed_masks = [load_mask(mask) for mask in masks]

# Make train/test split
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(processed_images, processed_masks, test_size=0.33, random_state=42)

print("# training images: ", len(X_train))
print("# test images: ", len(X_test))

# make Tensorflow Dataset objects for train/test
train_data = tf.data.Dataset.from_tensor_slices((X_train, Y_train))
test_data = tf.data.Dataset.from_tensor_slices((X_test, Y_test))

# hyperparameters for training
TRAIN_LENGTH = len(train_data)
BATCH_SIZE = 64
BUFFER_SIZE = 1000
STEPS_PER_EPOCH = TRAIN_LENGTH // BATCH_SIZE

# make train/test batches
train_batches = (
    train_data
    .cache()
    .shuffle(BUFFER_SIZE)
    .batch(BATCH_SIZE)
    .repeat()
    .map(Augment())
    .prefetch(buffer_size=tf.data.AUTOTUNE))

test_batches = test_data.batch(BATCH_SIZE)

# visualize processed training batch data
for images, masks in train_batches.take(2):
  sample_image, sample_mask = images[0], masks[0]
  display([sample_image, sample_mask], ['Input Image', 'True Mask'])

"""##Define Model"""

base_model = tf.keras.applications.MobileNetV2(input_shape=[128, 128, 3], include_top=False)

# Use the activations of these layers
layer_names = [
    'block_1_expand_relu',   # 64x64
    'block_3_expand_relu',   # 32x32
    'block_6_expand_relu',   # 16x16
    'block_13_expand_relu',  # 8x8
    'block_16_project',      # 4x4
]
base_model_outputs = [base_model.get_layer(name).output for name in layer_names]

# Create the feature extraction model
down_stack = tf.keras.Model(inputs=base_model.input, outputs=base_model_outputs)

down_stack.trainable = False

up_stack = [
    pix2pix.upsample(512, 3),  # 4x4 -> 8x8
    pix2pix.upsample(256, 3),  # 8x8 -> 16x16
    pix2pix.upsample(128, 3),  # 16x16 -> 32x32
    pix2pix.upsample(64, 3),   # 32x32 -> 64x64
]

def unet_model(output_channels:int):
  inputs = tf.keras.layers.Input(shape=[128, 128, 3])

  # Downsampling through the model
  skips = down_stack(inputs)
  x = skips[-1]
  skips = reversed(skips[:-1])

  # Upsampling and establishing the skip connections
  for up, skip in zip(up_stack, skips):
    x = up(x)
    concat = tf.keras.layers.Concatenate()
    x = concat([x, skip])

  # This is the last layer of the model
  last = tf.keras.layers.Conv2DTranspose(
      filters=output_channels, kernel_size=3, strides=2,
      padding='same')  #64x64 -> 128x128

  x = last(x)

  return tf.keras.Model(inputs=inputs, outputs=x)

"""##Train Model"""

OUTPUT_CLASSES = 2 # binary mask

model = unet_model(output_channels=OUTPUT_CLASSES)
model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

# plot model architecture
tf.keras.utils.plot_model(model, show_shapes=True)

def create_mask(pred_mask):
  pred_mask = tf.math.argmax(pred_mask, axis=-1)
  pred_mask = pred_mask[..., tf.newaxis]
  return pred_mask[0]

def show_predictions(dataset=None, num=1):
  if dataset:
    for image, mask in dataset.take(num):
      pred_mask = model.predict(image)
      display([image[0], mask[0], create_mask(pred_mask)], ['True Image', 'True Mask', 'Predicted Mask'])
  else:
    display([sample_image, sample_mask,
             create_mask(model.predict(sample_image[tf.newaxis, ...]))], ['True Image', 'True Mask', 'Predicted Mask'])

# show model output before training
show_predictions()

class DisplayCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs=None):
    # clear_output(wait=True)
    show_predictions()
    print ('\nSample Prediction after epoch {}\n'.format(epoch+1))

# train model
EPOCHS = 30
VAL_SUBSPLITS = 1
VALIDATION_STEPS = len(test_data)//BATCH_SIZE//VAL_SUBSPLITS

model_history = model.fit(train_batches, epochs=EPOCHS,
                          steps_per_epoch=STEPS_PER_EPOCH,
                          validation_steps=VALIDATION_STEPS,
                          validation_data=test_batches,
                          callbacks=[DisplayCallback()])

"""## Visualize Training Results"""

# want to show true mask & predicted mask applied to true image

show_predictions(test_batches, 1)

loss = model_history.history['loss']
# val_loss = model_history.history['val_loss']

plt.figure()
plt.plot(model_history.epoch, loss, 'r', label='Training loss')
# plt.plot(model_history.epoch, val_loss, 'bo', label='Validation loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss Value')
plt.ylim([0, 1])
plt.legend()
plt.show()

# compute model metrics over test set
for images, masks in test_batches:
  pred_masks = tf.math.argmax(model.predict(images), axis=-1)
  pred_masks = pred_masks[..., tf.newaxis]

  # visualize one test set example
  display([images[0], masks[0], pred_masks[0]], ['Input Image', 'True Mask', 'Predicted Mask'])

  # compute accuracy
  acc = tf.keras.metrics.Accuracy()
  acc.update_state(masks, pred_masks)
  print("Test Accuracy: ", acc.result().numpy())

  # compute test IoU
  iou = tf.keras.metrics.IoU(num_classes=2, target_class_ids=[0])
  iou.update_state(masks, pred_masks)
  print("Test IoU: ", iou.result().numpy())


  # compute distribution of accuracy over test set
  accuracies = []
  for i in range(len(masks)):
    acc = tf.keras.metrics.Accuracy()
    acc.update_state(masks[i], pred_masks[i])
    accuracies.append(acc.result().numpy())

  print(accuracies)
  plt.hist(accuracies)
  plt.xlabel("Pixel Accuracy")
  plt.ylabel("Count")
  plt.title("Pixel Accuracies over Test Set")

  # compute distribution of IoU over test set






  # compute test F1
  f1 = tfa.metrics.F1Score(num_classes=2, threshold=0.5)
  f1.update_state(tf.cast(masks, tf.float32), tf.cast(pred_masks, tf.float32))
  print("Test F1: ", f1.result().numpy())

IoUs = []
  for i in range(len(masks)):
    iou = tf.keras.metrics.IoU(num_classes=2, target_class_ids=[0])
    iou.update_state(masks[i], pred_masks[i])
    IoUs.append(iou.result().numpy())

  print(IoUs)
  plt.hist(IoUs)
  plt.xlabel("IoUs")
  plt.ylabel("Count")
  plt.title("IoUs over Test Set")

"""i used https://www.kaggle.com/code/yassinealouini/all-the-segmentation-metrics#What-about-Jaccard-and-IoU?
to do the metrics

"""

# compute model metrics over test set
for images, masks in test_batches:
  pred_masks = tf.math.argmax(model.predict(images), axis=-1)
  pred_masks = pred_masks[..., tf.newaxis]

  # visualize one test set example
  display([images[0], masks[0], pred_masks[0]], ['Input Image', 'True Mask', 'Predicted Mask'])

  import numpy as np
  import matplotlib.pylab as plt
  import cv2

  unbalanced_mask = np.zeros((256, 256), dtype=np.uint8)
  unbalanced_mask[0:10, 20:40] = 1
  unbalanced_mask[100:120, 200:240] = 1
  plt.imshow(cv2.cvtColor(255 * unbalanced_mask, cv2.COLOR_GRAY2RGB))

  from sklearn.metrics import confusion_matrix

    # Imagine these are the first pixels of the masks: true vs predicted.
  y_true = [0, 1, 1, 1, 0, 1, 1, 0]
  y_pred = [0, 0, 0, 0, 1, 1, 1, 0]
  confusion_m = confusion_matrix(y_true, y_pred)

  import matplotlib.pyplot as plt
  def plot_confusion_matrix(m, title='Confusion matrix'):

    fig, ax = plt.subplots(1, 1, figsize=(15, 8))

    img = ax.matshow(m)
    plt.title(title)
    plt.colorbar(img)
    tick_marks = np.arange(2)
    plt.xticks(tick_marks, ["0", "1"], rotation=45)
    plt.yticks(tick_marks, ["0", "1"])
    plt.tight_layout()
    plt.ylabel("A")
    plt.xlabel("B")

  plot_confusion_matrix(confusion_m)
  # compute test IoU

  # compute test F1
  import f1_Test
  #f1 =
  print("Test F1: ")

"""##Model Metrics"""

data = pd.read_csv(test_batches)
data.head()
from sklearn.model_selection import train_test_split


X_train, X_test, y_train, y_test = [None, None, None, None]
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error

random_forest_model = RandomForestRegressor(max_depth=2, random_state=0)

random_forest_model.fit(X_train, y_train)

predictions = random_forest_model.predict(X_test)

mean_absolute_error(y_test, predictions)